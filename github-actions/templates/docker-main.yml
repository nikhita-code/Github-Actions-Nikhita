name: Application Deployment CI/CD (using self-hosted runners)

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    name: AWS Docker Project Build
    runs-on: self-hosted

    env:
      AWS_REGION: eu-west-1
      # Set these in GitHub Secrets
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}   # e.g. 123456789012.dkr.ecr.eu-west-1.amazonaws.com
      ECR_REPOSITORY: app-repo

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          echo "Logging into ECR..."
          aws ecr get-login-password --region $AWS_REGION | \
            docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Build docker image
        run: |
          echo "Building Docker image..."
          docker build -t $ECR_REPOSITORY:latest .
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Push to ECR
        run: |
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy-ec2:
    name: AWS Deploy to EC2
    runs-on: self-hosted
    needs: build-and-push

    env:
      AWS_REGION: eu-west-1
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      ECR_REPOSITORY: app-repo

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Checking Docker installation..."
            if ! command -v docker &> /dev/null
            then
              echo "Installing Docker..."
              curl -fsSL https://get.docker.com | sh
              sudo usermod -aG docker $USER
              newgrp docker
            fi

            echo "Logging into ECR..."
            aws ecr get-login-password --region $AWS_REGION | \
              docker login --username AWS --password-stdin $ECR_REGISTRY

            echo "Pulling latest image..."
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest

            echo "Stopping old container if running..."
            docker stop myapp || true
            docker rm myapp || true

            echo "Starting new container..."
            docker run -d --name myapp -p 3000:80 $ECR_REGISTRY/$ECR_REPOSITORY:latest
